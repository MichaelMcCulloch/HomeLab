---
- name: Install OpenStack
  hosts: cluster
  become: true
  tasks:
    - name: Add OpenStack repository key
      ansible.builtin.apt_key:
        url: "http://osbpo.debian.net/osbpo/dists/pubkey.gpg"
        state: present

    - name: Add OpenStack repository
      ansible.builtin.apt_repository:
        repo: "deb http://deb.debian.org/debian/ {{ ansible_distribution_release }}-backports main"
        state: present
        filename: openstack

    - name: Update package cache
      ansible.builtin.apt:
        update_cache: true

- name: Obtain CephX user keys for Cinder, Glance, and Nova
  hosts: cluster
  become: true
  tasks:
    - name: Get CephX user keys
      ansible.builtin.command:
        cmd: "ceph-authtool /etc/ceph/ceph.client.{{ item }}.keyring --name=client.{{ item }} --print-key"
      register: ceph_user_keys_result
      loop:
        - glance
        - cinder
        - nova
      changed_when: false

    - name: Set CephX user keys as facts
      ansible.builtin.set_fact:
        ceph_user_key_{{ item.item }}: "{{ item.stdout }}"
      loop: "{{ ceph_user_keys_result.results }}"


- name: Install and configure Keystone
  hosts: cluster
  become: true
  tasks:
    - name: Install Keystone packages
      ansible.builtin.apt:
        name:
          - keystone
          - python3-openstackclient
        state: present

    - name: Configure Keystone
      ansible.builtin.blockinfile:
        path: /etc/keystone/keystone.conf
        block: |
          [DEFAULT]
          log_dir = /var/log/keystone

          [database]
          connection = mysql+pymysql://keystone:{{ keystone_db_password }}@{{ cluster_ip[inventory_hostname][0] }}/keystone

          [token]
          provider = fernet
        marker: "# {mark} ANSIBLE MANAGED BLOCK"

    - name: Enable caching in Keystone configuration
      ansible.builtin.lineinfile:
        path: /etc/keystone/keystone.conf
        regexp: "^enabled ="
        line: "enabled = true"
        insertafter: "^[cache]"

    - name: Create Keystone database and user
      community.mysql.mysql_db:
        login_host: "{{ cluster_ip[inventory_hostname][0] }}"
        login_password: "{{ mysql_root_password }}"
        login_unix_socket: /run/mysqld/mysqld.sock
        login_user: root
        name: keystone
        state: present

    - name: Grant privileges to Keystone user
      community.mysql.mysql_user:
        host: "{{ cluster_ip[inventory_hostname][0] }}"
        login_password: "{{ mysql_root_password }}"
        login_unix_socket: /run/mysqld/mysqld.sock
        login_user: root
        name: keystone
        password: "{{ keystone_db_password }}"
        priv: "keystone.*:ALL"
        state: present

    - name: Initialize Keystone database
      ansible.builtin.command:
        cmd: "keystone-manage db_sync"

    - name: Initialize Fernet keys
      ansible.builtin.command:
        cmd: "keystone-manage fernet_setup --keystone-user keystone --keystone-group keystone"
      args:
        creates: /etc/keystone/fernet-keys/0

    - name: Initialize credential keys
      ansible.builtin.command:
        cmd: "keystone-manage credential_setup --keystone-user keystone --keystone-group keystone"
      args:
        creates: /etc/keystone/credential-keys/0

    - name: Set correct permissions for credential key repository
      ansible.builtin.file:
        path: /etc/keystone/credential-keys
        owner: keystone
        group: keystone
        mode: "0750"
    # - name: Start and enable Keystone service
    #   ansible.builtin.systemd:
    #     name: keystone
    #     state: started
    #     enabled: true
